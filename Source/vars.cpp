#include "vars.h"
#include "const.h"

using namespace std;

ALLEGRO_BITMAP* bmp_background = NULL;
ALLEGRO_BITMAP* bmp_blue[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_blue_burrowed[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_blue_idle[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_blue_onion = NULL;
ALLEGRO_BITMAP* bmp_bubble = NULL;
ALLEGRO_BITMAP* bmp_cursor = NULL;
ALLEGRO_BITMAP* bmp_day_bubble = NULL;
ALLEGRO_BITMAP* bmp_health_bubble = NULL;
ALLEGRO_BITMAP* bmp_idle_glow = NULL;
ALLEGRO_BITMAP* bmp_louie = NULL;
ALLEGRO_BITMAP* bmp_mouse_cursor = NULL;
ALLEGRO_BITMAP* bmp_move_group_arrow = NULL;
ALLEGRO_BITMAP* bmp_olimar = NULL;
ALLEGRO_BITMAP* bmp_president = NULL;
ALLEGRO_BITMAP* bmp_red[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_red_burrowed[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_red_idle[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_red_onion = NULL;
ALLEGRO_BITMAP* bmp_shadow = NULL;
ALLEGRO_BITMAP* bmp_sun = NULL;
ALLEGRO_BITMAP* bmp_ub_spray = NULL;
ALLEGRO_BITMAP* bmp_us_spray = NULL;
ALLEGRO_BITMAP* bmp_yellow[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_yellow_burrowed[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_yellow_idle[3] = {NULL, NULL, NULL};
ALLEGRO_BITMAP* bmp_yellow_onion = NULL;

ALLEGRO_BITMAP* bmp_test = NULL;
sector test_sector;
vector<linedef> test_linedefs;

sample_struct sfx_camera;
sample_struct sfx_dismiss;
sample_struct sfx_louie_whistle;
sample_struct sfx_louie_name_call;
sample_struct sfx_olimar_whistle;
sample_struct sfx_olimar_name_call;
sample_struct sfx_president_whistle;
sample_struct sfx_president_name_call;
sample_struct sfx_pikmin_called;
sample_struct sfx_pikmin_held;
sample_struct sfx_pikmin_plucked;
sample_struct sfx_pikmin_thrown;
sample_struct sfx_throw;

vector<unsigned int>  berries;
ALLEGRO_BITMAP*       bmp_error;
float                 cam_trans_pan_final_x = 0;
float                 cam_trans_pan_final_y = 0;
float                 cam_trans_pan_initi_x = 0;
float                 cam_trans_pan_initi_y = 0;
float                 cam_trans_pan_time_left = 0;
float                 cam_trans_zoom_final_level = 1;
float                 cam_trans_zoom_initi_level = 1;
float                 cam_trans_zoom_time_left = 0;
float                 cam_x = 0;
float                 cam_y = 0;
float                 cam_zoom = 1;
mob*                  closest_party_member = NULL;
size_t                current_leader = 0;
float                 cursor_x = 0;
float                 cursor_y = 0;
unsigned int          day = 0;
float                 day_minutes = 60 * 12; //ToDo set to the start of the day.
float                 day_minutes_end = 60 * 19;
float                 day_minutes_per_irl_sec = 2;//2.75;
float                 day_minutes_start = 60 * 7;
bool                  daylight_effect = true;
ALLEGRO_FONT*         font = NULL;
ALLEGRO_FONT*         font_area_name = NULL;
unsigned short        font_h = 0;
unsigned char         game_fps = DEF_FPS;
float                 graphic_scale = 0.5;
float                 idle_glow_angle = 0;
vector<info_spot*>    info_spots;
vector<leader*>       leaders;
float                 mouse_cursor_x = scr_w/2 + CURSOR_MAX_DIST;
float                 mouse_cursor_y = scr_h/2;
float                 mouse_cursor_speed_x = 0;
float                 mouse_cursor_speed_y = 0;
vector<float>         move_group_arrows;
float                 move_group_next_arrow_time = 0;
float                 moving_group_angle = 0;
float                 moving_group_intensity = 0;
bool                  moving_group_to_cursor = false;
vector<nectar*>       nectars;
vector<onion*>        onions;
unsigned char         particle_quality = 2;
vector<particle>      particles;
bool                  paused = false;
vector<unsigned long> pikmin_in_onions;
vector<pikmin*>       pikmin_list;
vector<pikmin_type>   pikmin_types;
bool                  running = true;
unsigned short        scr_h = DEF_SCR_W;
unsigned short        scr_w = DEF_SCR_H;
vector<sector>        sectors;
unsigned int          selected_spray = 0;
bool                  smooth_scaling = true;
vector<unsigned long> sprays;
vector<spray_type>    spray_types;
vector<status>        statuses;
string                total_error_log;
vector<treasure*>     treasures;
float                 whistle_dot_offset = 0;
float                 whistle_dot_radius[6] = {-1, -1, -1, -1, -1, -1};
float                 whistle_fade_radius = 0;
float                 whistle_fade_time = 0;
bool                  whistle_is_circle = false;
float                 whistle_max_hold = 0;
float                 whistle_next_dot_time = 0;
float                 whistle_next_ring_time = 0;
float                 whistle_radius = 0;
vector<unsigned char> whistle_ring_colors;
unsigned char         whistle_ring_prev_color = 0;
vector<float>         whistle_rings;
bool                  whistling = false;
